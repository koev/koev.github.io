{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","hooks/useTodoState.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","state","setState","useInputState","value","setValue","e","target","EditTodoForm","_ref","id","task","editTodo","toggleEditForm","_useInputState","_useInputState2","handleChange","reset","react_default","a","createElement","onSubmit","preventDefault","style","marginLeft","width","TextField_default","margin","onChange","fullWidth","autoFocus","Todo","completed","removeTodo","toggleTodo","_useToggleState","useToggleState","_useToggleState2","isEditing","toggle","ListItem_default","height","src_EditTodoForm","Fragment","Checkbox_default","tabIndex","checked","onClick","textDecoration","ListItemSecondaryAction_default","IconButton_default","aria-label","Delete_default","Edit_default","TodoList","todos","Paper_default","List_default","map","todo","i","key","src_Todo","assign","Divider_default","TodoForm","addTodo","padding","label","useTodoState","initialTodos","setTodos","newTodoText","concat","toConsumableArray","uuid","todoId","updatedTodos","filter","objectSpread","newTask","TodoApp","JSON","parse","window","localStorage","getItem","_useTodoState","useEffect","setItem","stringify","backgroundColor","elevation","AppBar_default","color","position","Toolbar_default","Typography_default","Grid_default","container","justify","marginTop","item","xs","md","lg","src_TodoForm","src_TodoList","App","src_TodoApp","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.535c0430.chunk.js","sourcesContent":["import { useState } from \"react\";\nfunction useToggle(initialVal = false) {\n  // call useState, \"reserve piece of state\"\n  const [state, setState] = useState(initialVal);\n  const toggle = () => {\n    setState(!state);\n  };\n  // return piece of state AND a function to toggle it\n  return [state, toggle];\n}\nexport default useToggle;\n","import { useState } from \"react\";\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue(\"\");\n  };\n  return [value, handleChange, reset];\n};\n","import React from \"react\";\nimport useInputState from \"./hooks/useInputState\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction EditTodoForm({ id, task, editTodo, toggleEditForm }) {\n  const [value, handleChange, reset] = useInputState(task);\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        editTodo(id, value);\n        reset();\n        toggleEditForm();\n      }}\n      style={{ marginLeft: \"1rem\", width: \"50%\" }}\n    >\n      <TextField\n        margin='normal'\n        value={value}\n        onChange={handleChange}\n        fullWidth\n        autoFocus\n      />\n    </form>\n  );\n}\nexport default EditTodoForm;\n","import React from \"react\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItem\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n\nfunction Todo({ id, task, completed, removeTodo, toggleTodo, editTodo }) {\n  const [isEditing, toggle] = useToggleState(false);\n  return (\n    <ListItem style={{ height: \"64px\" }}>\n      {isEditing ? (\n        <EditTodoForm\n          editTodo={editTodo}\n          id={id}\n          task={task}\n          toggleEditForm={toggle}\n        />\n      ) : (\n        <>\n          <Checkbox\n            tabIndex={-1}\n            checked={completed}\n            onClick={() => toggleTodo(id)}\n          />\n          <ListItemText\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n          >\n            {task}\n          </ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton aria-label='Delete' onClick={() => removeTodo(id)}>\n              <DeleteIcon />\n            </IconButton>\n            <IconButton aria-label='Edit' onClick={toggle}>\n              <EditIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </>\n      )}\n    </ListItem>\n  );\n}\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"./Todo\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\n\nfunction TodoList({ todos, removeTodo, toggleTodo, editTodo }) {\n  if (todos.length)\n    return (\n      <Paper>\n        <List>\n          {todos.map((todo, i) => (\n            // To add a key to a fragment, we have to use the long-hand version\n            // rather than <> </>, we have to use <React.Fragment>\n            <React.Fragment key={i}>\n              <Todo\n                {...todo}\n                key={todo.id}\n                removeTodo={removeTodo}\n                toggleTodo={toggleTodo}\n                editTodo={editTodo}\n              />\n              {i < todos.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n    );\n  return null;\n}\nexport default TodoList;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport useInputState from \"./hooks/useInputState\";\nfunction TodoForm({ addTodo }) {\n  const [value, handleChange, reset] = useInputState(\"\");\n  return (\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addTodo(value);\n          reset();\n        }}\n      >\n        <TextField\n          value={value}\n          onChange={handleChange}\n          margin='normal'\n          label='Add New Todo'\n          fullWidth\n        />\n      </form>\n    </Paper>\n  );\n}\nexport default TodoForm;\n","import { useState } from \"react\";\nimport uuid from \"uuid/v4\";\nexport default initialTodos => {\n  const [todos, setTodos] = useState(initialTodos);\n  return {\n    todos,\n    addTodo: newTodoText => {\n      setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\n    },\n    removeTodo: todoId => {\n      //filter out removed todo\n      const updatedTodos = todos.filter(todo => todo.id !== todoId);\n      //call setTodos with new todos array\n      setTodos(updatedTodos);\n    },\n    toggleTodo: todoId => {\n      const updatedTodos = todos.map(todo =>\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n      );\n      setTodos(updatedTodos);\n    },\n    editTodo: (todoId, newTask) => {\n      const updatedTodos = todos.map(todo =>\n        todo.id === todoId ? { ...todo, task: newTask } : todo\n      );\n      setTodos(updatedTodos);\n    }\n  };\n};\n","import React, { useEffect } from \"react\";\nimport TodoList from \"./TodoList\";\nimport TodoForm from \"./TodoForm\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport useTodoState from \"./hooks/useTodoState\";\n\nfunction TodoApp() {\n  const initialTodos = JSON.parse(window.localStorage.getItem(\"todos\") || \"[]\");\n  const { todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState(\n    initialTodos\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\"\n      }}\n      elevation={0}\n    >\n      <AppBar color='primary' position='static' style={{ height: \"64px\" }}>\n        <Toolbar>\n          <Typography color='inherit'>TODOS WITH HOOKS</Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container justify='center' style={{ marginTop: \"1rem\" }}>\n        <Grid item xs={11} md={8} lg={4}>\n          <TodoForm addTodo={addTodo} />\n          <TodoList\n            todos={todos}\n            removeTodo={removeTodo}\n            toggleTodo={toggleTodo}\n            editTodo={editTodo}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\nexport default TodoApp;\n","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\n\nfunction App() {\n  return <TodoApp />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}